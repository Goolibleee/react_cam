{"version":3,"sources":["components/Reader.js","Util.js","images/Logo.png","pages/Manual.js","App.js","reportWebVitals.js","index.js"],"names":["PAUSE_COUNT","delayCount","Reader","props","video","useRef","canvasRef","_useState","useState","_useState2","_slicedToArray","result","setResult","_useState3","_useState4","black","setBlack","tick","periodic","setTimeout","current","readyState","HAVE_ENOUGH_DATA","height","videoHeight","width","videoWidth","canvas","getContext","drawImage","imageData","getImageData","code","jsQR","data","inversionAttempts","console","log","time","Date","useEffect","onScan","isMounted","inter","setInterval","requestAnimationFrame","clearInterval","navigator","mediaDevices","getUserMedia","facingMode","then","stream","srcObject","setAttribute","play","_unused","_jsxs","children","_jsx","style","filter","ref","hidden","String","prototype","format","formatted","this","i","arguments","length","regexp","RegExp","replace","Set","Manual","App","_initialize","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","process","APP_NAME","APP_VERSION","stop","apply","initialize","Router","className","Routes","Route","path","element","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","draggable","pauseOnHover","pauseOnFocusLoss","transition","Zoom","icon","REACT_APP_VERSION","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4bd66ccd.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport jsQR from \"jsqr\";\nimport \"../App.css\";\n\nconst PAUSE_COUNT = 5;\nlet delayCount = 0;\nfunction Reader(props) {\n    const video = useRef();\n    const canvasRef = useRef();\n    const [result, setResult] = useState();\n    const [black, setBlack] = useState(false);\n\n    function shutter() {\n        setBlack(true);\n        setTimeout(() => {\n            setBlack(false);\n        }, 300);\n    }\n\n    useEffect(\n        function () {\n            if (result) {\n                props.onScan(result.data);\n                setResult(null);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [result]\n    );\n\n    useEffect(function () {\n        let isMounted = true;\n        const inter = setInterval(() => {\n            if (!isMounted)\n            {\n                console.log(\"Unmounted reader call\");\n                return;\n            }\n            requestAnimationFrame(tick);\n        }, 200);\n        return () => {\n            console.log(\"Clear interval for reader\");\n            isMounted = false;\n            clearInterval(inter);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(\n        function () {\n            navigator.mediaDevices\n                .getUserMedia({ video: { facingMode: \"environment\" } })\n                .then(function (stream) {\n                    console.log(stream);\n                    try {\n                        video.current.srcObject = stream;\n                        video.current.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\n                        video.current.play();\n                    } catch {}\n                });\n        },\n        [video, canvasRef]\n    );\n\n    function tick() {\n        if (props.periodic()) shutter();\n        if (--delayCount > 0) return;\n        if (video && video.current && video.current.readyState === video.current.HAVE_ENOUGH_DATA) {\n            canvasRef.current.height = video.current.videoHeight;\n            canvasRef.current.width = video.current.videoWidth;\n\n            var canvas = canvasRef.current.getContext(\"2d\");\n\n            canvas.drawImage(\n                video.current,\n                0,\n                0,\n                canvasRef.current.width,\n                canvasRef.current.height\n            );\n            var imageData = canvas.getImageData(\n                0,\n                0,\n                canvasRef.current.width,\n                canvasRef.current.height\n            );\n            var code = jsQR(imageData.data, imageData.width, imageData.height, {\n                inversionAttempts: \"dontInvert\",\n            });\n            if (code) {\n                console.log(code.data);\n                setResult({ data: code.data, time: new Date() });\n                delayCount = PAUSE_COUNT;\n            }\n            return;\n        }\n    }\n\n    return (\n        <div>\n            <video\n                style={{\n                    filter: black ? \"brightness(0%)\" : \"brightness(100%)\",\n                }}\n                ref={video}\n            ></video>\n            <canvas ref={canvasRef} hidden></canvas>\n        </div>\n    );\n}\n\nexport default Reader;\n","export const CODE_PER_SCREEN = 24;\r\nexport const CODE_PER_PAGE = 12;\r\n\r\nexport const sleep = (time) => {\r\n   return new Promise((resolve) => setTimeout(resolve, Math.ceil(time * 1000)));\r\n};\r\n\r\ninterface String\r\n{\r\n    format: () => String;\r\n}\r\n\r\n// eslint-disable-next-line no-extend-native\r\nString.prototype.format = function() {\r\n    let formatted = this;\r\n    for (let i = 0; i < arguments.length; i++) {\r\n        let regexp = new RegExp('\\\\{'+i+'\\\\}', 'gi');\r\n        formatted = formatted.replace(regexp, arguments[i]);\r\n    }\r\n    return formatted;\r\n}\r\n\r\nexport const toastProp = {\r\n    position: \"top-center\",\r\n    autoClose: 3000,\r\n    hideProgressBar: true,\r\n    closeOnClick: true,\r\n    pauseOnHover: true,\r\n    draggable: true,\r\n    progress: undefined\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Logo.f0526f33.png\";","import React, { useEffect, useState } from \"react\";\r\nimport \"./Scan.css\"\r\nimport { toast } from \"react-toastify\";\r\nimport Logo from \"../images/Logo.png\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport { sleep, toastProp } from \"../Util\";\r\nimport text from \"../api/text\";\r\n\r\nconst selectedIds = new Set();\r\n\r\nfunction getCurrentTime() {\r\n    return new Date().toLocaleTimeString(\"en-US\", {\r\n        hour12: true,\r\n        hour: \"numeric\",\r\n        minute: \"numeric\",\r\n    });\r\n}\r\n\r\nfunction Manual(props) {\r\n    const [inputText, setInputText] = useState(\"\");\r\n    const [studentList, setStudentList] = useState([]);\r\n    const [searchQuery] = useDebounce(inputText, 50);\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const [selectedId, selectIdImpl] = useState({id:-1});\r\n    const [todayDate, setTodayDate] = useState(new Date().toLocaleDateString());\r\n    const [currentTimeSec, setCurrentTimeSec] = useState(\"\");\r\n\r\n    useEffect(function () {\r\n        async function initialize() {\r\n            toast.dismiss();\r\n            while (!props.doc.isOpen()) {\r\n                await sleep(0.1);\r\n            }\r\n\r\n            let tD = new Date();\r\n            const sheetInfo = await props.doc.sheetsByDate(tD);\r\n\r\n            if (!sheetInfo)\r\n            {\r\n                const prop = toastProp;\r\n                prop.autoClose = 3000;\r\n                toast.error(text.failedToOpen, prop);\r\n                return;\r\n            }\r\n            const cachedData = props.doc.getCachedList();\r\n            let initNoti = null;\r\n            if (!cachedData.has(sheetInfo.header.id.toString()) ||\r\n                !cachedData.has(sheetInfo.header.name.toString()) )\r\n            {\r\n                console.log(\"Data should be loaded\");\r\n                const prop = toastProp;\r\n                prop.autoClose = false;\r\n                initNoti = toast.info(text.loading, prop);\r\n            }\r\n\r\n\r\n            console.log(sheetInfo.date);\r\n            const idIdx = sheetInfo.header.id;\r\n            const idList = await props.doc.readList(idIdx);\r\n            const nameIdx = sheetInfo.header.name;\r\n            const nameList = await props.doc.readList(nameIdx);\r\n            const list = [];\r\n            for (let i = 0 ; i < Math.min(idList.length, nameList.length); i++)\r\n            {\r\n               list.push({id: idList[i],  name: nameList[i]});\r\n            }\r\n            setStudentList(list);\r\n\r\n            console.log(\"Sheet read \" + list.length);\r\n            if (initNoti) {\r\n                const prop = toastProp;\r\n                prop.type = toast.TYPE.SUCCESS;\r\n                prop.autoClose = 3000;\r\n                prop.render = text.succeededToOpen;\r\n                toast.update(initNoti, prop);\r\n            }\r\n            setTodayDate(sheetInfo.date);\r\n        }\r\n        initialize();\r\n        return () => toast.dismiss();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(\r\n        () => {\r\n            async function findStudents(text) {\r\n                let results = [];\r\n\r\n                for (const row of studentList) {\r\n                    if (results.length > 4) break;\r\n                    if ((row.id && row.id.toString().includes(text)) ||\r\n                        (row.name && row.name.toString().includes(text)))\r\n                    {\r\n                        let resultString = `${row.id}: ${row.name}`;\r\n                        let resultObject = {\r\n                            id: row.id,\r\n                            name: row.name,\r\n                            text: resultString,\r\n                        };\r\n                        results.push(resultObject);\r\n                        selectedIds.add(row.id);\r\n                    }\r\n                }\r\n                return results;\r\n            }\r\n            async function query() {\r\n                if (searchQuery) {\r\n                    let sr = await findStudents(searchQuery);\r\n                    if (sr.length > 0)\r\n                    {\r\n                        setSearchResults(sr);\r\n                    }\r\n                    else\r\n                    {\r\n                        console.log(\"No matching student\");\r\n                        setSearchResults([]);\r\n                    }\r\n                } else {\r\n                    console.log(\"No matching student\");\r\n                    setSearchResults([]);\r\n                }\r\n            }\r\n            query();\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [searchQuery, studentList]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(async () => {\r\n            let timeSec = new Date().toLocaleTimeString(\"en-US\", {\r\n                hour12: true,\r\n                hour: \"numeric\",\r\n                minute: \"numeric\",\r\n                second: \"numeric\"\r\n            });\r\n            setCurrentTimeSec(timeSec);\r\n            return () => clearInterval(interval);\r\n        }, 200)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    const checkIn = (id) => {\r\n        console.log('Check in ' + id);\r\n        const currentTime = getCurrentTime();\r\n        selectedId.checkIn.value = currentTime;\r\n        props.doc.updateCell();\r\n        toast.success(text.checkIn.format(selectedId.name.value, currentTime), toastProp);\r\n    }\r\n\r\n    const checkOut = (id) => {\r\n        console.log('Check out ' + id);\r\n        const currentTime = getCurrentTime();\r\n        selectedId.checkOut.value = currentTime;\r\n        props.doc.updateCell();\r\n        toast.success(text.checkOut.format(selectedId.name.value, currentTime), toastProp);\r\n    }\r\n\r\n    const selectId = async (id) => {\r\n        const info = await props.doc.getStudent(id);\r\n        console.log(\"Select \" + selectedId.id + \" \" + id);\r\n        console.log(selectedId);\r\n        if (!selectedId || !selectedId.id || selectedId.id !== id)\r\n        {\r\n            console.log(\"Selected\");\r\n            console.log(info);\r\n            selectIdImpl({...info, id:id});\r\n        }\r\n        else\r\n        {\r\n            console.log(\"Deselect\");\r\n            selectIdImpl({id:-1});\r\n        }\r\n    }\r\n\r\n    const showEntries = (result) => {\r\n        let cIn, cOut;\r\n        let cInDisabled;\r\n        let cOutDisabled;\r\n        cInDisabled = cOutDisabled = false;\r\n        cIn = \"Check In\";\r\n        cOut = \"Check Out\";\r\n        const hidden = (selectedId.id !== result.id);\r\n        if (!hidden)\r\n        {\r\n            if (selectedId.checkIn.valueType)\r\n            {\r\n                cIn = \"Check In: \" + selectedId.checkIn.formattedValue;\r\n                cInDisabled = true;\r\n            }\r\n            if (selectedId.checkOut.valueType)\r\n            {\r\n                cOut = \"Check Out: \" + selectedId.checkOut.formattedValue;\r\n                cOutDisabled = true;\r\n            }\r\n        }\r\n        return (<div key={result.id}><button type=\"button\" id=\"searchResult\" onClick={async () => {await selectId(result.id);}}> {result.text} </button>\r\n                    <div hidden={hidden}>\r\n                        <button type=\"button\" id=\"checkInOut\" disabled={cInDisabled} onClick={() => {checkIn(result.id)}}> {cIn} </button>\r\n                        <button type=\"button\" id=\"checkInOut\" disabled={cOutDisabled} onClick={() => {checkOut(result.id)}}> {cOut} </button>\r\n                    </div>\r\n                </div>);\r\n    }\r\n\r\n    return (\r\n        <div id=\"manual\">\r\n            <div id=\"title\">\r\n                <img id=\"logo\" src={Logo} alt=\"SVKS\" ></img>\r\n                <h1> Manual Check In/Out </h1>\r\n            </div>\r\n            <div id=\"clock\">\r\n            {todayDate} {currentTimeSec}\r\n            </div>\r\n            <div id=\"manualInput\" >\r\n                <input id=\"search\"\r\n                    placeholder={\"Search for student or enter a number...\"}\r\n                    value={inputText}\r\n                    onChange={(event) => {\r\n                        setInputText(event.target.value);\r\n                    }} />\r\n\r\n                {\r\n                    searchResults.map((result) => {\r\n                        return showEntries(result);\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Manual;\r\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Scan from \"./pages/Scan\";\r\nimport Print from \"./pages/Print\";\r\nimport Manual from \"./pages/Manual\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { Zoom } from \"react-toastify\";\r\nimport { HashRouter as Router, Routes, Route, Link} from \"react-router-dom\";\r\nimport Reader from \"./components/Reader\";\r\n\r\nfunction App() {\r\n    useEffect(function () {\r\n        async function initialize() {\r\n            console.log(\"Initialize app\");\r\n            console.log(process.env.APP_NAME);\r\n            console.log(process.env.APP_VERSION);\r\n        }\r\n        initialize();\r\n    }, []);\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <Routes>\r\n                    <Route path=\"/\" element={<Reader/>} />\r\n                </Routes>\r\n\r\n                <ToastContainer\r\n                    position=\"bottom-center\"\r\n                    autoClose={3000}\r\n                    hideProgressBar={false}\r\n                    newestOnTop\r\n                    closeOnClick\r\n                    rtl={false}\r\n                    draggable\r\n                    pauseOnHover\r\n                    pauseOnFocusLoss={false}\r\n                    transition={Zoom}\r\n                    icon={false}\r\n                />\r\n                <h2>\r\n                    v {process.env.REACT_APP_VERSION}\r\n                </h2>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}