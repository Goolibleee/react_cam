{"version":3,"sources":["reportWebVitals.js","Scanner.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Scanner","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","_onDetected","result","console","log","codeResult","_createClass","key","value","Quagga","init","inputStream","name","type","constraints","width","height","locator","halfSample","patchSize","debug","showCanvas","showPatches","showFoundPatches","showSkeleton","showLabels","showPatchLabels","showRemainingPatchLabels","boxFromPatches","showTransformed","showTransformedBox","showBB","numOfWorkers","decoder","readers","drawBoundingBox","showFrequency","drawScanline","showPattern","locate","err","start","onDetected","this","offDetected","_jsx","id","className","Component","ReactDOM","render","React","StrictMode","children","document","getElementById"],"mappings":"mKAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EACV,GAEJ,G,mDCPMS,EAAO,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAAA,SAAAA,IAAA,IAAAK,EAAAC,YAAA,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAyER,OAzEQP,EAAAF,EAAAU,KAAAC,MAAAX,EAAA,OAAAY,OAAAL,KAqETM,YAAc,SAAAC,GACVC,QAAQC,IAAI,YACZD,QAAQC,IAAIF,EAAOG,WAEvB,EAACf,CAAA,CAIA,OAJAgB,YAAArB,EAAA,EAAAsB,IAAA,oBAAAC,MAxED,WACIL,QAAQC,IAAI,eACZK,IAAOC,KACH,CACIC,YAAa,CACTC,KAAM,OACNC,KAAM,aACNC,YAAa,CACTC,MAAO,IACPC,OAAQ,MAShBC,QAAS,CACLC,YAAY,EACZC,UAAW,SACXC,MAAO,CACHC,YAAY,EACZC,aAAa,EACbC,kBAAkB,EAClBC,cAAc,EACdC,YAAY,EACZC,iBAAiB,EACjBC,0BAA0B,EAC1BC,eAAgB,CACZC,iBAAiB,EACjBC,oBAAoB,EACpBC,QAAQ,KAIpBC,aAAc,EACdC,QAAS,CAGLC,QAAS,CAAC,cAEVd,MAAO,CACHe,iBAAiB,EACjBC,eAAe,EACfC,cAAc,EACdC,aAAa,IAGrBC,QAAQ,IAEZ,SAASC,GAEL,GADArC,QAAQC,IAAI,UACRoC,EACA,OAAOrC,QAAQC,IAAIoC,GAEvBrC,QAAQC,IAAI,gBACZK,IAAOgC,OACX,IAEJtC,QAAQC,IAAI,QACZK,IAAOiC,WAAWC,KAAK1C,YAC3B,GAAC,CAAAM,IAAA,uBAAAC,MAED,WACIC,IAAOmC,YAAYD,KAAK1C,YAC5B,GAAC,CAAAM,IAAA,SAAAC,MAQD,WACI,OAAOqC,cAAA,OAAKC,GAAG,cAAcC,UAAU,YAC3C,KAAC9D,CAAA,CA7EQ,CAAS+D,aAgFP/D,IC5EfgE,IAASC,OACPL,cAACM,IAAMC,WAAU,CAAAC,SACfR,cAAC5D,EAAO,MAEVqE,SAASC,eAAe,SAM1BhF,G","file":"static/js/main.7c4ddcd8.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from 'react'\nimport Quagga from 'quagga'\n\nclass Scanner extends Component {\n    componentDidMount() {\n        console.log(\"Init Quagga\");\n        Quagga.init(\n            {\n                inputStream: {\n                    name: \"Live\",\n                    type: 'LiveStream',\n                    constraints: {\n                        width: 640,\n                        height: 320,\n                    },\n//                   area: { // defines rectangle of the detection/localization area\n//                     top: \"40%\",    // top offset\n//                     right: \"10%\",  // right offset\n//                     left: \"10%\",   // left offset\n//                     bottom: \"60%\"  // bottom offset\n//                   },\n                },\n                locator: {\n                    halfSample: true,\n                    patchSize: \"medium\", // x-small, small, medium, large, x-large\n                    debug: {\n                        showCanvas: true,\n                        showPatches: true,\n                        showFoundPatches: true,\n                        showSkeleton: true,\n                        showLabels: true,\n                        showPatchLabels: true,\n                        showRemainingPatchLabels: true,\n                        boxFromPatches: {\n                            showTransformed: true,\n                            showTransformedBox: true,\n                            showBB: true\n                        }\n                    }\n                },\n                numOfWorkers: 4,\n                decoder: {\n//                    readers: ['code_128_reader'],\n//                    readers: ['i2of5_reader'],\n                    readers: ['ean_reader'],\n\n                    debug: {\n                        drawBoundingBox: true,\n                        showFrequency: true,\n                        drawScanline: true,\n                        showPattern: true\n                    },\n                },\n                locate: true,\n            },\n            function(err) {\n                console.log(\"Failed\");\n                if (err) {\n                    return console.log(err)\n                }\n                console.log(\"Start Quagga\");\n                Quagga.start()\n            },\n        );\n        console.log(\"done\");\n        Quagga.onDetected(this._onDetected)\n    }\n\n    componentWillUnmount() {\n        Quagga.offDetected(this._onDetected)\n    }\n\n    _onDetected = result => {\n        console.log(\"Detected\");\n        console.log(result.codeResult);\n//        this.props.onDetected(result)\n    }\n\n    render() {\n        return <div id=\"interactive\" className=\"viewport\" />\n    }\n}\n\nexport default Scanner\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n//import Reader from \"./Reader\";\nimport Scanner from \"./Scanner\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Scanner />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}