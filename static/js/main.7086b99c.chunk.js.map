{"version":3,"sources":["reportWebVitals.js","Reader.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","videoConstraints","width","height","facingMode","Reader","props","videoRef","useRef","webcamRef","canvasRef","_useState","useState","_useState2","_slicedToArray","result","setResult","useEffect","onScan","data","isMounted","console","log","inter","setInterval","requestAnimationFrame","tick","clearInterval","navigator","mediaDevices","getUserMedia","video","stream","current","srcObject","setAttribute","play","_unused","drawLine","context","info","style","arguments","length","undefined","x","y","x1","y1","_style$color","color","_style$width","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","ctx","getContext","getScreenshot","_jsxs","children","_jsx","id","className","ref","Webcam","screenshotFormat","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7086b99c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport Webcam from \"react-webcam\";\nimport \"./Reader.css\";\nimport axios from \"axios\";\n\nconst videoConstraints = {\n    width: 640,\n    height: 480,\n    facingMode: \"user\"\n};\n\nfunction Reader(props) {\n    const videoRef = useRef();\n    const webcamRef = useRef();\n    const canvasRef = useRef();\n    const [result, setResult] = useState();\n\n    useEffect(\n        function () {\n            if (result) {\n                props.onScan(result.data);\n                setResult(null);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [result]\n    );\n\n    useEffect(function () {\n        let isMounted = true;\n        console.log(\"Set interval\");\n        const inter = setInterval(() => {\n            if (!isMounted)\n            {\n                console.log(\"Unmounted reader call\");\n                return;\n            }\n            requestAnimationFrame(tick);\n        }, 2000);\n        return () => {\n            console.log(\"Clear interval for reader\");\n            isMounted = false;\n            clearInterval(inter);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(\n        function () {\n            navigator.mediaDevices\n                .getUserMedia({ video: { facingMode: \"environment\" } })\n                .then(function (stream) {\n                    console.log(stream);\n                    console.log(\"TEST\");\n                    try {\n                        videoRef.current.srcObject = stream;\n                        videoRef.current.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\n                        videoRef.current.play();\n                    } catch {}\n                });\n        },\n        [videoRef, canvasRef]\n    );\n    const drawLine = (context, info, style = {}) => {\n        const { x, y, x1, y1 } = info;\n        const { color = 'black', width = 1 } = style;\n\n        context.beginPath();\n        context.moveTo(x, y);\n        context.lineTo(x1, y1);\n        context.strokeStyle = color;\n        context.lineWidth = width;\n        context.stroke();\n    }\n\n/*\n    var sendBase64ToServer = function(base64) {\n        var httpPost = new XMLHttpRequest(),\n        path = \"http://127.0.0.1:8080/uploadImage\",\n        data = JSON.stringify({image: base64});\n        httpPost.onreadystatechange = function(err) {\n            if (httpPost.readyState == 4 && httpPost.status == 200){\n                console.log(httpPost.responseText);\n            } else {\n                console.log(err);\n            }\n        };\n        // Set the content type of the request to json since that's what's being sent\n        httpPost.setHeader('Content-Type', 'application/json');\n        httpPost.open(\"POST\", path, true);\n        httpPost.send(data);\n    };\n    var uploadImage = function(data, type){\n        sendBase64ToServer(data);\n    };\n*/\n\n    function tick() {\n            canvasRef.current.height = 480; //videoRef.current.videoHeight;\n            canvasRef.current.width = 640; //videoRef.current.videoWidth;\n\n            var ctx = canvasRef.current.getContext(\"2d\");\n//            var ctx = canvasRef.current.getContext(\"2d\");\n\n            console.log('tick');\n\n            const image = webcamRef.current.getScreenshot();\n/*\n            if (image) {\n                const str = image.toDataURL();\n                console.log(str);\n            }\n*/\n//            uploadImage(image, \"image/png\");\n/*\n            axios({\n                method: \"post\",\n                url: \"http://10.0.0.68:8080/uploadImage\",\n                headers: {\n                    \"Access-Control-Allow-Origin\": \"*\",\n                    \"Content-Type\": \"application/json\"\n                },\n                data: {\n                    image: image\n                }\n            });\n            console.log(image);\n*/\n\n            /*\n            ctx.drawImage(\n                image,\n                0,\n                0,\n                canvasRef.current.width,\n                canvasRef.current.height\n            );\n            const str = canvasRef.toDataURL();\n            console.log(str);\n            var imageData = ctx.getImageData(\n                0,\n                0,\n                canvasRef.current.width,\n                canvasRef.current.height\n            );\n            BarcodeReader({\n                image: imageData,\n//                barcode: 'code-2of5',\n                barcode: 'coda-128',\n                options: {}\n            }).then(code => {\n                console.log('['+code+']');\n            }).catch(err => {\n                console.log(err);\n            })\n            */\n            drawLine(ctx, { x: 20, y: 20, x1: 20, y1: 100 });\n\n            drawLine(ctx, { x: 50, y: 50, x1: 200, y1: 100 }, { color: 'red' });\n\n            drawLine(ctx, { x: 300, y: 250, x1: 260, y1: 70 }, { color: 'green', width: 5 });\n\n            drawLine(ctx, { x: 70, y: 240, x1: 160, y1: 120 }, { color: 'blue' });\n            drawLine(ctx, { x: 0, y: 3, x1: 640, y1: 3 }, { color: 'green', width: 5 });\n            drawLine(ctx, { x: 3, y: 0, x1: 3, y1: 480 }, { color: 'green', width: 5 });\n            drawLine(ctx, { x: 0, y: 477, x1: 640, y1: 477 }, { color: 'green', width: 5 });\n            drawLine(ctx, { x: 637, y: 0, x1: 637, y1: 480 }, { color: 'green', width: 5 });\n            /*\n            var code = jsQR(imageData.data, imageData.width, imageData.height, {\n                inversionAttempts: \"dontInvert\",\n            });\n            if (code) {\n                console.log(code.data);\n                setResult({ data: code.data, time: new Date() });\n            }\n            */\n            return;\n    }\n\n    return (\n        <div>\n                <canvas id=\"canvas\" className=\"canvas\" ref={canvasRef} width={640} height={480}></canvas>\n                <Webcam id=\"webcam\" ref={webcamRef} screenshotFormat=\"image/png\" width={640} height={480}\n                    videoConstraints={videoConstraints}\n                />\n            <div>Test 2</div>\n        </div>\n    );\n}\n\nexport default Reader;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Reader from \"./Reader\";\n//import Scanner from \"./Scanner\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Reader />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}